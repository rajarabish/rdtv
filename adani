To write a program to find frequent 2-itemset in a given dataset for minimum  support count =2.

Code:

from itertools import combinations
from collections import Counter

def find_frequent_itemsets(transactions, min_support):
    item_counts = Counter()
    for transaction in transactions:
        for item in transaction:
            item_counts[item] += 1

    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}
    
    two_itemsets = Counter()
    for transaction in transactions:
        for itemset in combinations(sorted(transaction), 2):
            if itemset[0] in frequent_items and itemset[1] in frequent_items:
                two_itemsets[itemset] += 1

    frequent_two_itemsets = {itemset: count for itemset, count in two_itemsets.items() if count >= min_support}
    
    return frequent_two_itemsets

def main():
    num_transactions = int(input("Enter the number of transactions: "))
    transactions = []

    for _ in range(num_transactions):
        transaction = input("Enter transaction items (comma-separated): ").strip().split(',')
        transactions.append([item.strip() for item in transaction])

    min_support = 2

    frequent_two_itemsets = find_frequent_itemsets(transactions, min_support)
    
    print("\nFrequent 2-itemsets (support count >= {}):".format(min_support))
    for itemset, count in frequent_two_itemsets.items():
        print(f"{itemset}: {count}")

if __name__ == "__main__":
    main()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Write a program to implement the K-means Clustering algorithm for the given data set with required no. of clusters.

Code:

import numpy as np
import random

def euclidean_distance(a, b):
    return np.sqrt(np.sum((a - b) ** 2))

def kmeans_clustering(data, k, max_iterations=100):
    # Select initial centroids
    centroids = data[np.random.choice(data.shape[0], k, replace=False)]

    for _ in range(max_iterations):
        clusters = [[] for _ in range(k)]
        
        for point in data:
            distances = [euclidean_distance(point, centroid) for centroid in centroids]
            closest_centroid = np.argmin(distances)
            clusters[closest_centroid].append(point)
        
        new_centroids = [np.mean(cluster, axis=0) if cluster else centroids[i] for i, cluster in enumerate(clusters)]
        
        if np.all(np.array(new_centroids) == centroids):
            break
        
        centroids = new_centroids

    return clusters, centroids

def main():
    n = int(input("Enter the number of data points: "))
    
    data = []
    print("Enter the data points (space-separated values):")
    for i in range(n):
        point = list(map(float, input(f"Point {i+1}: ").split()))
        data.append(point)
    
    data = np.array(data)
    
    k = int(input("Enter the number of clusters (k): "))
    
    if k > n:
        print("Error: The number of clusters cannot be greater than the number of data points.")
        return

    clusters, centroids = kmeans_clustering(data, k)
    
    print("\nClusters:")
    for i, cluster in enumerate(clusters):
        print(f"Cluster {i+1}: {np.array(cluster)}")
    
    print("\nCentroids:")
    for i, centroid in enumerate(centroids):
        print(f"Centroid {i+1}: {centroid}")

if __name__ == "__main__":
    main()


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


Write theory and SQL query to perform one OLAP operation - (Mobile Sales Database).

Step 1: Create the Database and Tables



CREATE DATABASE MobileSales;

USE MobileSales;

CREATE TABLE Sales (SaleID INT PRIMARY KEY,SaleDate DATE,ProductName VARCHAR(50),Category VARCHAR(30),Region VARCHAR(30),Amount DECIMAL(10, 2),Quantity INT);



Step 2: Insert Sample Data


INSERT INTO Sales (SaleID, SaleDate, ProductName, Category, Region, Amount, Quantity) VALUES
(1, '2024-01-01', 'iPhone 14', 'Smartphone', 'North', 999.99, 5),
(2, '2024-01-02', 'Samsung Galaxy S21', 'Smartphone', 'South', 799.99, 3),
(3, '2024-02-01', 'Google Pixel 6', 'Smartphone', 'East', 699.99, 2),
(4, '2024-02-15', 'OnePlus 9', 'Smartphone', 'West', 729.99, 4),
(5, '2024-03-01', 'iPhone 13', 'Smartphone', 'North', 899.99, 6),
(6, '2024-03-20', 'Nokia 3310', 'Feature Phone', 'South', 49.99, 10),
(7, '2024-04-01', 'Samsung Galaxy A52', 'Smartphone', 'East', 399.99, 7),
(8, '2024-04-10', 'Motorola Moto G', 'Smartphone', 'West', 299.99, 8);


Step 3: Perform OLAP Operations

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1. Drill Down


SELECT
YEAR(SaleDate) AS Year,
MONTH(SaleDate) AS Month,
SUM(Amount) AS TotalSales
FROM Sales
GROUP BY YEAR(SaleDate), MONTH(SaleDate)
ORDER BY Year, Month;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

2. Roll Up

SELECT
Category,
SUM(Amount) AS TotalSales
FROM Sales
GROUP BY Category;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

3. Dice

SELECT
SaleDate,
ProductName,
Amount
FROM Sales
WHERE Category = 'Smartphone' AND Region = 'North';

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

4. Slice

SELECT
ProductName,
Amount
FROM Sales
WHERE MONTH(SaleDate) = 3;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

5. Pivot

SELECT
ProductName,
SUM(CASE WHEN Region = 'North' THEN Amount ELSE 0 END) AS NorthSales,
SUM(CASE WHEN Region = 'South' THEN Amount ELSE 0 END) AS SouthSales,
SUM(CASE WHEN Region = 'East' THEN Amount ELSE 0 END) AS EastSales,
SUM(CASE WHEN Region = 'West' THEN Amount ELSE 0 END) AS WestSales
FROM Sales
GROUP BY ProductName;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
