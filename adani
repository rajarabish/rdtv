To write a program to find frequent 2-itemset in a given dataset for minimum  support count =2.

Code:

from itertools import combinations
from collections import Counter

def find_frequent_itemsets(transactions, min_support):
    item_counts = Counter()
    for transaction in transactions:
        for item in transaction:
            item_counts[item] += 1

    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}
    
    two_itemsets = Counter()
    for transaction in transactions:
        for itemset in combinations(sorted(transaction), 2):
            if itemset[0] in frequent_items and itemset[1] in frequent_items:
                two_itemsets[itemset] += 1

    frequent_two_itemsets = {itemset: count for itemset, count in two_itemsets.items() if count >= min_support}
    
    return frequent_two_itemsets

def main():
    num_transactions = int(input("Enter the number of transactions: "))
    transactions = []

    for _ in range(num_transactions):
        transaction = input("Enter transaction items (comma-separated): ").strip().split(',')
        transactions.append([item.strip() for item in transaction])

    min_support = 2

    frequent_two_itemsets = find_frequent_itemsets(transactions, min_support)
    
    print("\nFrequent 2-itemsets (support count >= {}):".format(min_support))
    for itemset, count in frequent_two_itemsets.items():
        print(f"{itemset}: {count}")

if __name__ == "__main__":
    main()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
